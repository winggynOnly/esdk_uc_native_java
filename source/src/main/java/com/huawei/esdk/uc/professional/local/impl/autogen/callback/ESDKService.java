package com.huawei.esdk.uc.professional.local.impl.autogen.callback;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.6.1
 * 2013-09-30T09:21:28.147+08:00
 * Generated source version: 2.6.1
 * 
 */
@WebServiceClient(name = "eSDKService", 
                  wsdlLocation = "esdk_uc_professional_callback_native.wsdl",
                  targetNamespace = "esdk_uc_professional_server") 
public class ESDKService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("esdk_uc_professional_server", "eSDKService");
    public final static QName UCProfessionalCTC = new QName("esdk_uc_professional_server", "UCProfessional.CTC");
    public final static QName UCProfessionalCTD = new QName("esdk_uc_professional_server", "UCProfessional.CTD");
    public final static QName UCProfessionalIM = new QName("esdk_uc_professional_server", "UCProfessional.IM");
    public final static QName UCProfessionalCommon = new QName("esdk_uc_professional_server", "UCProfessional.common");
    public final static QName UCProfessionalClient = new QName("esdk_uc_professional_server", "UCProfessional.Client");
    static {
        URL url = ESDKService.class.getResource("esdk_uc_professional_callback_native.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(ESDKService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "esdk_uc_professional_callback_native.wsdl");
        }       
        WSDL_LOCATION = url;
    }

    public ESDKService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ESDKService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ESDKService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ESDKService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ESDKService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ESDKService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName);
    }

    /**
     *
     * @return
     *     returns UCProfessionalCTC
     */
    @WebEndpoint(name = "UCProfessional.CTC")
    public UCProfessionalCTC getUCProfessionalCTC() {
        return super.getPort(UCProfessionalCTC, UCProfessionalCTC.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UCProfessionalCTC
     */
    @WebEndpoint(name = "UCProfessional.CTC")
    public UCProfessionalCTC getUCProfessionalCTC(WebServiceFeature... features) {
        return super.getPort(UCProfessionalCTC, UCProfessionalCTC.class, features);
    }
    /**
     *
     * @return
     *     returns UCProfessionalCTD
     */
    @WebEndpoint(name = "UCProfessional.CTD")
    public UCProfessionalCTD getUCProfessionalCTD() {
        return super.getPort(UCProfessionalCTD, UCProfessionalCTD.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UCProfessionalCTD
     */
    @WebEndpoint(name = "UCProfessional.CTD")
    public UCProfessionalCTD getUCProfessionalCTD(WebServiceFeature... features) {
        return super.getPort(UCProfessionalCTD, UCProfessionalCTD.class, features);
    }
    /**
     *
     * @return
     *     returns UCProfessionalIM
     */
    @WebEndpoint(name = "UCProfessional.IM")
    public UCProfessionalIM getUCProfessionalIM() {
        return super.getPort(UCProfessionalIM, UCProfessionalIM.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UCProfessionalIM
     */
    @WebEndpoint(name = "UCProfessional.IM")
    public UCProfessionalIM getUCProfessionalIM(WebServiceFeature... features) {
        return super.getPort(UCProfessionalIM, UCProfessionalIM.class, features);
    }
    /**
     *
     * @return
     *     returns UCProfessionalCommon
     */
    @WebEndpoint(name = "UCProfessional.common")
    public UCProfessionalCommon getUCProfessionalCommon() {
        return super.getPort(UCProfessionalCommon, UCProfessionalCommon.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UCProfessionalCommon
     */
    @WebEndpoint(name = "UCProfessional.common")
    public UCProfessionalCommon getUCProfessionalCommon(WebServiceFeature... features) {
        return super.getPort(UCProfessionalCommon, UCProfessionalCommon.class, features);
    }
    /**
     *
     * @return
     *     returns UCProfessionalClient
     */
    @WebEndpoint(name = "UCProfessional.Client")
    public UCProfessionalClient getUCProfessionalClient() {
        return super.getPort(UCProfessionalClient, UCProfessionalClient.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UCProfessionalClient
     */
    @WebEndpoint(name = "UCProfessional.Client")
    public UCProfessionalClient getUCProfessionalClient(WebServiceFeature... features) {
        return super.getPort(UCProfessionalClient, UCProfessionalClient.class, features);
    }

}
